{
  "openapi": "3.0.3",
  "info": {
    "title": "LN-Markets API",
    "description": "Trade derivatives on the **[Lightning Network](https://lightning.network/).**",
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "Mainnet API",
      "url": "https://api.lnmarkets.com"
    }
  ],
  "tags": [
    {
      "name": "LNURL",
      "description": "Interactions with Lightning Network"
    },
    {
      "name": "Login",
      "description": "Authentication processes"
    },
    {
      "name": "Positions",
      "description": "Interactions with the market"
    },
    {
      "name": "User",
      "description": "Interactions with the website"
    },
    {
      "name": "State",
      "description": "Services availability"
    }
  ],
  "security": [
    {
      "cookieAuth": []
    },
    {
      "jwtAuth": []
    }
  ],
  "paths": {
    "/login/credentials": {
      "get": {
        "tags": [
          "Login"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Informations needed to create an account.",
        "description": "Generates an invoice for future use in the account creation process.",
        "operationId": "Login_getCredentials",
        "responses": {
          "200": {
            "description": "Invoice successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoice": {
                      "type": "string",
                      "example": "lntb1u1p0jfxqcpp5ju9y2cur3v7nderx6u6ah7xj82lczem0pmmm4z5n2sn3de4qjqwqdz42pshjgr5dp5hxgrfdemx76trv5s8gmeqvdex2ct5v5s8jmm4wgsxzcmrda6kuapqdahzqnzwypxkzuntv468xcqzpgxqzz6sp53jz0ewjjwvnzkpl9pz8ar506z7dq3e4yw05pj9lulknhrwscncpq9qy9qsqzjvtdmnzptrq8avvynfdkswcts4ll8ffxxu02pgcg2ptyvz4xncsxrx3u32paw4806et6wan6tln60266zpd77a7usyv59jc83mnukqphdr5yx"
                    },
                    "expiry": {
                      "type": "integer",
                      "format": "int32",
                      "example": 90
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Login"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Register a new account.",
        "description": "Pay the invoice generated through a `/login/credentials` **GET** request and then use `paymentHash` to certify validity and finally create the account.",
        "operationId": "Login_registerCredentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "paymentHash",
                  "login",
                  "password"
                ],
                "properties": {
                  "paymentHash": {
                    "type": "string",
                    "minLength": 64,
                    "maxLength": 64,
                    "example": "b45dd2e30309aa708a73f0cfa0e38db5bbbbd16055087a692e0711365e7e08f5"
                  },
                  "login": {
                    "type": "string",
                    "pattern": "^\\S{6,32}$",
                    "minLength": 6,
                    "maxLength": 32,
                    "example": "Test-login"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "pattern": "^(?=\\S)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).\\S{7,63}",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "Test-Password01"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfuly created and logged.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Test-login"
                    },
                    "balance": {
                      "type": "string",
                      "example": "0"
                    },
                    "account_type": {
                      "type": "string",
                      "example": "credentials"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      },
      "post": {
        "tags": [
          "Login"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Log into an existing account.",
        "description": "Use existing credentials to log into an account.",
        "operationId": "Login_loginCredentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "login",
                  "password"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "example": "Test-login"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "Password01"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly logged into the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Test-login"
                    },
                    "balance": {
                      "type": "string",
                      "example": "0"
                    },
                    "account_type": {
                      "type": "string",
                      "example": "credentials"
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      }
    },
    "/lnurl/a": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "First request for LNURL where the wallet send the public key with the k1 and signature.",
        "description": "Verify the public key with the signature and the k1 to create a account or connect into a existing account.\nThe connected state will be push over websockets\n",
        "operationId": "LNURL_authentificate",
        "parameters": [
          {
            "name": "k1",
            "in": "query",
            "description": "Hex encoded 32 bytes of challenge which is going to be signed by user private key.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-fA-F0-9]{64}$"
            },
            "example": "kyNVmR6HDtAW2aplYk6XmmpDrIhvzzq6"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "LNURL type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "login"
              ]
            },
            "example": "login"
          },
          {
            "name": "sig",
            "in": "query",
            "description": "Signature generated by the lightning wallet.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "qep5sAqwleQS27UdKLGNsCBTWB4soS45us9vJAbk1hMEdCAXoeB6IESi3Nz7SXJM"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Public key of the lightning wallet.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Yc4h1Z5BZVmgmVQfIbdPWRVj9kHAo3uf"
          },
          {
            "name": "hmac",
            "in": "query",
            "description": "HMAC signature used to secure LNURL.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "kuSHSXXDiP4qofiL2LGelesLLlRXUCJd"
          },
          {
            "name": "t",
            "in": "query",
            "description": "Timestamp.",
            "schema": {
              "type": "string",
              "pattern": "^[0-9]+$"
            },
            "example": "1599492534790"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfuly logged in."
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      }
    },
    "/lnurl/a/c": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "LNURL Auth String",
        "description": "LNURL string used to create an account or connect to a existing account.\nThe user wallet will sign a message using the provided k1 inside the LNURL.\n",
        "operationId": "LNURL_authCreate",
        "responses": {
          "200": {
            "description": "Bech32 encoded string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lnurl": {
                      "type": "string",
                      "example": "lnurl1dp68gup69uhkcmmrv9kxsmmnwsarxvpsxqhkcmn4wfkz7cflw3skw0tvdankjm3xdvcn6venvgcrjenpx3nrwdtpxsur2vfsvdjk2dfkxe3kgceexymkgcmrxpjkgc3jvgmrqdnzvvurjwtr89jk2dp4vccrxvmrvvmxzdehxuejv6rdv93n6wpkv56rxcf4xqcxgwfsvsuxget9vymnqcfnv43rgwfjv5ex2cn9vyckgwtyvejrgc3excekyetpx43rvd3nxeskxvm9xqcxvwtpv5mq9uwr0k"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lnurl/w": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Third LNURL withdraw request.",
        "description": "Use LNURL to withdraw from the user balance.",
        "operationId": "LNURL_Withdraw",
        "parameters": [
          {
            "name": "k1",
            "in": "query",
            "required": true,
            "description": "Random hex string to identify the user Lightning Wallet.",
            "schema": {
              "type": "string",
              "minLength": 32,
              "maxLength": 32
            }
          },
          {
            "name": "pr",
            "in": "query",
            "required": true,
            "description": "Bolt 11 invoice.",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9]+$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfuly withdrawn funds from channel."
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      }
    },
    "/lnurl/w/r": {
      "get": {
        "tags": [
          "LNURL"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Second LNURL withdraw request.",
        "description": "Ask the Lightning wallet to create an invoice with amount and description.",
        "operationId": "LNURL_WithdrawRequest",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": true,
            "description": "HMAC payload signature.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "query",
            "required": true,
            "description": "Nonce.",
            "schema": {
              "type": "string",
              "minLength": 32,
              "maxLength": 32
            }
          },
          {
            "name": "expiry",
            "in": "query",
            "description": "Timestamp when the LNURL is expired.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "example": 45
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LNURL withdraw invoice parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "callback": {
                      "type": "string",
                      "example": "https://api.lnmarkets.com/lnurl/w"
                    },
                    "defaultDescription": {
                      "type": "string",
                      "example": "LN Markets withdraw"
                    },
                    "tag": {
                      "type": "string",
                      "example": "withdrawRequest"
                    },
                    "maxWithdrawable": {
                      "type": "integer",
                      "format": "int32",
                      "example": 1000
                    },
                    "minWithdrawable": {
                      "type": "integer",
                      "format": "int32",
                      "example": 1000
                    },
                    "k1": {
                      "type": "string",
                      "example": "31c92c1bd79d2ae5f96a153ceda105cb67888c61bfb76baa1d2505a6bf8a06ca"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      }
    },
    "/login/joule": {
      "post": {
        "tags": [
          "Login"
        ],
        "security": [],
        "deprecated": false,
        "description": "Use the browser extension [Joule](https://lightningjoule.com/) to authenticate user.",
        "operationId": "Login_loginJoule",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "message",
                  "signature",
                  "alias"
                ],
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Test-Joule"
                  },
                  "signature": {
                    "type": "string",
                    "example": "rd1nn7qbnibf58mzaknokqu6eciiqr64gahrzzxy3h8ybdygbun7s86zrms1dedqnh7t4gxz3esqmaqi9pkf85f48rexai7qztbdznfp"
                  },
                  "alias": {
                    "type": "string",
                    "example": "Test-node"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucessfuly logged user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "Test-node"
                    },
                    "balance": {
                      "type": "string",
                      "example": "0"
                    },
                    "linkingpublickey": {
                      "type": "string",
                      "example": "02b21cc4667e2d5e14920013d187d2af8c3ccfd32a310f63c7767cf8564f126357"
                    },
                    "account_type": {
                      "type": "string",
                      "example": "joule"
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          }
        }
      }
    },
    "/positions": {
      "get": {
        "tags": [
          "Positions"
        ],
        "security": [
          {
            "jwtAuth": [
              "positions"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Positions history. (Rework API Response - Object with Array of Objects)",
        "description": "Retrieves either opened, closed or all positions.",
        "operationId": "Position_getPositionList",
        "parameters": [
          {
            "name": "open",
            "in": "query",
            "description": "List opened positions.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "closed",
            "in": "query",
            "description": "List closed positions.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "List all positions.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Positions history sucessfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "positions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "canceled": {
                            "type": "boolean",
                            "example": false
                          },
                          "canceled_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          },
                          "closed": {
                            "type": "boolean",
                            "example": true
                          },
                          "closed_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                          },
                          "creation_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                          },
                          "exit_price": {
                            "type": "string",
                            "example": "10010.0"
                          },
                          "funded": {
                            "type": "boolean",
                            "example": true
                          },
                          "funded_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          },
                          "id": {
                            "type": "string",
                            "example": "98"
                          },
                          "leverage": {
                            "type": "string",
                            "example": "50.0000"
                          },
                          "liquidation": {
                            "type": "string",
                            "example": "10194.0"
                          },
                          "margin": {
                            "type": "string",
                            "example": "136536"
                          },
                          "margin_wi": {
                            "type": "string",
                            "example": "closed"
                          },
                          "market_filled_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                          },
                          "market_wi": {
                            "type": "string",
                            "example": "filled"
                          },
                          "payment_hash": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "pid": {
                            "type": "string",
                            "example": "249dc818-f8a5-4713-a3a3-8fe85f2e8969"
                          },
                          "pl": {
                            "type": "string",
                            "example": "-13640"
                          },
                          "price": {
                            "type": "string",
                            "example": "9990.0"
                          },
                          "quantity": {
                            "type": "string",
                            "example": "682"
                          },
                          "side": {
                            "type": "string",
                            "example": "s"
                          },
                          "sign": {
                            "type": "string",
                            "example": "-1"
                          },
                          "stoploss": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "stoploss_wi": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "takeprofit": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "takeprofit_wi": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "type": {
                            "type": "string",
                            "example": "m"
                          },
                          "uid": {
                            "type": "string",
                            "example": "d068f829-26e6-4743-b10d-ebb5a83b3624"
                          },
                          "user_id": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "wid": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "withdraw": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "put": {
        "tags": [
          "Positions"
        ],
        "security": [
          {
            "jwtAuth": [
              "positions"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Update position parameters.",
        "description": "Allows user to modify `stoploss` and `takeprofit` parameters of an existing position.",
        "operationId": "Position_updatePosition",
        "requestBody": {
          "description": "Payload with everything needed to update a position accordingly.\n\n**Pay attention : `stoploss` and `takeprofit` are mutually exclusives. This means you cannot send a request containing the two parameters at once.**",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "pid",
                      "takeprofit"
                    ],
                    "properties": {
                      "pid": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                      },
                      "takeprofit": {
                        "type": "number",
                        "format": "double",
                        "minimum": 0,
                        "multipleOf": 0.1
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "required": [
                      "pid",
                      "stoploss"
                    ],
                    "properties": {
                      "pid": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
                      },
                      "stoploss": {
                        "type": "number",
                        "format": "double",
                        "minimum": 0,
                        "multipleOf": 0.1
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "example": {
                "pid": "b87eef8a-52ab-2fea-1adc-c41fba870b0f",
                "takeprofit": 9800.5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Says whether or not the position was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "post": {
        "tags": [
          "Positions"
        ],
        "security": [
          {
            "jwtAuth": [
              "positions"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "New position",
        "description": "Send the order form parameters to add a new position in database.",
        "operationId": "Position_createPosition",
        "requestBody": {
          "description": "Payload with all the information needed to setup a new position. \nif `side=\"l\"`, the property `price` must be included in the request to know when the position should be filled.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "side",
                  "type",
                  "margin"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "l",
                      "m"
                    ]
                  },
                  "side": {
                    "type": "string",
                    "enum": [
                      "b",
                      "s"
                    ]
                  },
                  "margin": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1
                  },
                  "leverage": {
                    "type": "number",
                    "format": "double",
                    "multipleOf": 1e-10
                  },
                  "quantity": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "takeprofit": {
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.1,
                    "minimum": 1
                  },
                  "stoploss": {
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.1,
                    "minimum": 1
                  },
                  "price": {
                    "type": "number",
                    "format": "double",
                    "multipleOf": 0.1,
                    "minimum": 1
                  }
                },
                "example": {
                  "type": "m",
                  "side": "b",
                  "margin": 100000,
                  "leverage": 25,
                  "quantity": 500
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Position sucessfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canceled": {
                      "type": "boolean",
                      "example": false
                    },
                    "canceled_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "example": null
                    },
                    "closed": {
                      "type": "boolean",
                      "example": true
                    },
                    "closed_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "creation_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "exit_price": {
                      "type": "string",
                      "example": "10010.0"
                    },
                    "funded": {
                      "type": "boolean",
                      "example": true
                    },
                    "funded_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "example": null
                    },
                    "id": {
                      "type": "string",
                      "example": "98"
                    },
                    "leverage": {
                      "type": "string",
                      "example": "50.0000"
                    },
                    "liquidation": {
                      "type": "string",
                      "example": "10194.0"
                    },
                    "margin": {
                      "type": "string",
                      "example": "136536"
                    },
                    "margin_wi": {
                      "type": "string",
                      "example": "closed"
                    },
                    "market_filled_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "market_wi": {
                      "type": "string",
                      "example": "filled"
                    },
                    "payment_hash": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "pid": {
                      "type": "string",
                      "example": "249dc818-f8a5-4713-a3a3-8fe85f2e8969"
                    },
                    "pl": {
                      "type": "string",
                      "example": "-13640"
                    },
                    "price": {
                      "type": "string",
                      "example": "9990.0"
                    },
                    "quantity": {
                      "type": "string",
                      "example": "682"
                    },
                    "side": {
                      "type": "string",
                      "example": "s"
                    },
                    "sign": {
                      "type": "string",
                      "example": "-1"
                    },
                    "stoploss": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "stoploss_wi": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "takeprofit": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "takeprofit_wi": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "type": {
                      "type": "string",
                      "example": "m"
                    },
                    "uid": {
                      "type": "string",
                      "example": "d068f829-26e6-4743-b10d-ebb5a83b3624"
                    },
                    "user_id": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "wid": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "withdraw": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "delete": {
        "tags": [
          "Positions"
        ],
        "security": [
          {
            "jwtAuth": [
              "positions"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Close a position.",
        "description": "Ends a contract and update user balance according to the **[P&L](https://investinganswers.com/dictionary/p/profit-loss-pl-statement)**",
        "operationId": "Position_closePosition",
        "parameters": [
          {
            "name": "pid",
            "in": "query",
            "description": "ID of the position to close.",
            "schema": {
              "type": "string",
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "example": "a2ca6172-1078-463d-ae3f-8733f36a9b0e"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfuly closed position.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canceled": {
                      "type": "boolean",
                      "example": false
                    },
                    "canceled_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "example": null
                    },
                    "closed": {
                      "type": "boolean",
                      "example": true
                    },
                    "closed_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "creation_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "exit_price": {
                      "type": "string",
                      "example": "10010.0"
                    },
                    "funded": {
                      "type": "boolean",
                      "example": true
                    },
                    "funded_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "example": null
                    },
                    "id": {
                      "type": "string",
                      "example": "98"
                    },
                    "leverage": {
                      "type": "string",
                      "example": "50.0000"
                    },
                    "liquidation": {
                      "type": "string",
                      "example": "10194.0"
                    },
                    "margin": {
                      "type": "string",
                      "example": "136536"
                    },
                    "margin_wi": {
                      "type": "string",
                      "example": "closed"
                    },
                    "market_filled_ts": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "market_wi": {
                      "type": "string",
                      "example": "filled"
                    },
                    "payment_hash": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "pid": {
                      "type": "string",
                      "example": "249dc818-f8a5-4713-a3a3-8fe85f2e8969"
                    },
                    "pl": {
                      "type": "string",
                      "example": "-13640"
                    },
                    "price": {
                      "type": "string",
                      "example": "9990.0"
                    },
                    "quantity": {
                      "type": "string",
                      "example": "682"
                    },
                    "side": {
                      "type": "string",
                      "example": "s"
                    },
                    "sign": {
                      "type": "string",
                      "example": "-1"
                    },
                    "stoploss": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "stoploss_wi": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "takeprofit": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "takeprofit_wi": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "type": {
                      "type": "string",
                      "example": "m"
                    },
                    "uid": {
                      "type": "string",
                      "example": "d068f829-26e6-4743-b10d-ebb5a83b3624"
                    },
                    "user_id": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "wid": {
                      "type": "string",
                      "nullable": true,
                      "example": null
                    },
                    "withdraw": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/positions/cancel": {
      "post": {
        "tags": [
          "Positions"
        ],
        "security": [
          {
            "jwtAuth": [
              "positions"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "description": "Cancel the position linked to the given `pid`.**Only works on positions that are not currently filled**.",
        "operationId": "Position_cancelPosition",
        "requestBody": {
          "description": "Payload containing the position id that will be cancelled.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "pid"
                ],
                "properties": {
                  "pid": {
                    "type": "string",
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "example": "b87eef8a-52ab-2fea-1adc-c41fba870b0f"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully cancelled the given position."
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/state/api": {
      "get": {
        "tags": [
          "State"
        ],
        "security": [],
        "deprecated": false,
        "summary": "module statuses.",
        "description": "Shows available interactions with the platform.",
        "operationId": "State_apiState",
        "responses": {
          "200": {
            "description": "Services are running (not necessarily available).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "withdraw": {
                      "type": "boolean"
                    },
                    "newposition": {
                      "type": "boolean"
                    },
                    "accountCreation": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/state/node": {
      "get": {
        "tags": [
          "State"
        ],
        "security": [],
        "deprecated": false,
        "summary": "Lightning node status.",
        "description": "Shows informations about the node.",
        "operationId": "State_nodeState",
        "responses": {
          "200": {
            "description": "The Lightning node is online.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "example": "03375e4d3218dde2524feecaab7dc3a11a6ea186ff86c3cf2722e7237abc0d6d68@34.192.102.161:9735"
                    },
                    "alias": {
                      "type": "string",
                      "example": "Localnode"
                    },
                    "pubkey": {
                      "type": "string",
                      "example": "03375ead3218dd78024fe0caab7dc3a11a6ea186be86c3cf2722e7237abc0d6dc8"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "user"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Retrieves user informations.",
        "description": "Fetches UID, username, account type and current balance.",
        "operationId": "User_getUser",
        "responses": {
          "200": {
            "description": "User found and informations are fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "example": "d068f829-26e6-4743-b10d-ebb5a83b3624"
                    },
                    "balance": {
                      "type": "string",
                      "example": "361086"
                    },
                    "username": {
                      "type": "string",
                      "example": "Test-user"
                    },
                    "account_type": {
                      "type": "string",
                      "example": "credentials"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "user"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Update user informations.",
        "description": "Update the current password to the requested one.",
        "operationId": "User_updateUser",
        "requestBody": {
          "description": "Payload containing user credentials.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "previousPassword",
                  "newPassword"
                ],
                "properties": {
                  "previousPassword": {
                    "type": "string",
                    "format": "password",
                    "pattern": "^(?=\\S)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).\\S{7,63}",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "Password01"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "pattern": "^(?=\\S)(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).\\S{7,63}",
                    "minLength": 8,
                    "maxLength": 64,
                    "example": "Password02"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfuly."
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/deposit": {
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "deposit"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "description": "Move funds from user wallet to the **[Lightning channel](https://medium.com/suredbits/lightning-101-what-are-lightning-channels-cfb80f440298)** with LN Markets.",
        "operationId": "User_deposit",
        "requestBody": {
          "description": "Payload that contains all informations to initialize a new deposit.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 100,
                    "maximum": 1000000,
                    "example": 10000
                  },
                  "unit": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$",
                    "default": "sat",
                    "example": "sat"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New deposit entry in database waiting for payment. Using `paymentRequest` afterwards, user will confirm the deposit and funds will be added to his account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paymentRequest": {
                      "type": "string",
                      "example": "lntb100u1p0jrfz0pp5q0ntrkf052dvep8w6vf0z77rek3fz8xm6c2yau4zhy7f4mzauqgsdzcf3hy6ctjddjhgueqg3jhqmmnd96zqgmxxquryvesvv6z6dehv43z6drpvycj6wfevs6j6dmyxcunxefcxccxxvn9cqzpgxqzpdsp5z40mxcrfqtsxf55u9ju3lvqdw36htsjh4xl2ujrzdff3953fg2yq9qy9qsqv7gfvp0tryme3e8r5xfrpg39j645302fkggps4h5j0aj708lzdgh2dq3pdz6lqazgvkt3wm7qq20vcff46vu5549m3v2d6h0uw3sjacqrkjqcv"
                    },
                    "expiry": {
                      "type": "integer",
                      "example": 45
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/history": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "user"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "(Rework API Response - Object with Array of Objects)",
        "description": "Retrieves all funds that either went in or out of the **[Lightning channel](https://medium.com/suredbits/lightning-101-what-are-lightning-channels-cfb80f440298)** between user and LN-Markets.",
        "operationId": "User_getHistory",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Which kind of transactions will be fetched.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]+$",
              "enum": [
                "withdraw",
                "deposit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "History sucessfully pulled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "string",
                            "example": "99400"
                          },
                          "creation_ts": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "details": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "did": {
                            "type": "string",
                            "example": "269157f3-d4a1-4493-afcb-5e8fdaa49288"
                          },
                          "fail": {
                            "type": "boolean",
                            "example": false
                          },
                          "fail_reason": {
                            "type": "string",
                            "nullable": true,
                            "example": null
                          },
                          "fail_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          },
                          "payment_hash": {
                            "type": "string",
                            "example": "33f45c13c7ddcae46c6732414552893ca599f9399c62ffc2cfae209e8b17c5c3"
                          },
                          "success": {
                            "type": "boolean"
                          },
                          "sucess_ts": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true,
                            "example": null
                          },
                          "uid": {
                            "type": "string",
                            "example": "d068f829-26e6-4743-b10d-ebb5a83b3624"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/jwt": {
      "get": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Lists active JSON Web Tokens.",
        "description": "Retrieves the list of active JSON Web Token user currently holds.",
        "operationId": "User_GetJWTList",
        "responses": {
          "200": {
            "description": "Token list retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "aud": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "position",
                            "withdraw",
                            "deposit",
                            "user"
                          ]
                        },
                        "uniqueItems": true,
                        "maxItems": 4
                      },
                      "exp": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "iat": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "jti": {
                        "type": "string",
                        "example": "ckea35me20019r8u36374585f"
                      },
                      "revoked": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Revoked an active JSON Web Toekn.",
        "description": "Using the `jti` parameter, identifies and revoke usage of a given JWT.",
        "operationId": "User_RevokeJWT",
        "parameters": [
          {
            "name": "jti",
            "in": "query",
            "description": "Token unique identifier.",
            "schema": {
              "type": "string",
              "example": "ckea35me20019r8u36374585f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token successfuly revoked."
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "summary": "Create a new JSON Web Token.",
        "description": "Using the given scopes, allow the token bearer to get access to different parts of the public API.",
        "operationId": "User_CreateJWT",
        "requestBody": {
          "description": "Scopes of authorization that the token will grant to the bearer.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "scopes",
                  "expiry"
                ],
                "properties": {
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "deposit",
                        "withdraw",
                        "positions",
                        "user"
                      ],
                      "example": [
                        "deposit",
                        "withdraw"
                      ]
                    },
                    "uniqueItems": true,
                    "maxItems": 4
                  },
                  "expiry": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "example": 86400
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfuly created, its Base64URL encoded signature is returned for future use.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "signature": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjMwMDAiLCJpYXQiOjE1OTgwNTg2NDQsInNjb3BlcyI6WyJ3aXRoZHJhdyIsImRlcG9zaXQiXX0.xJ3f5eMeRiN0eSzo3IDviny9B9v_-bLg4t_EWmXFBxc"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/withdraw": {
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "withdraw"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "description": "Move funds from the **[Lightning channel](https://medium.com/suredbits/lightning-101-what-are-lightning-channels-cfb80f440298)** with LN Markets to user wallet by using an invoice directly.",
        "operationId": "User_withdraw",
        "requestBody": {
          "description": "Payload that countains all informations to initiate a new withdraw.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount",
                  "invoice"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 1000,
                    "example": 10000
                  },
                  "unit": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$",
                    "example": "sat"
                  },
                  "invoice": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$",
                    "example": "lntb100u1p0jr0ykpp5ldx3un8ym6z0uwjxd083mp2rcr04d2dv0fkx729ajs62pq9pfjqqdql23jhxapdwa5hg6rywfshwttjda6hgegcqzpgxq92fjuqsp5m6q0fzynu2qr624mzjc285duurhccmkfg94mcdctc0p9s7qkrq8q9qy9qsqp862cjznpey5r76e7amhlpmhwn2c7xvke59srhv0xf75m4ksjm4hzn8y9xy0zs5ec6gxmsr8gj4q23w8ped32llscjcneyjz2afeapqpu4gamz"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funds are removed from user account and added to user wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "integer",
                      "example": 10000
                    },
                    "paymentsecret": {
                      "type": "string",
                      "example": "1b84c9852e929f99700b6cbabc4ca9d1593afc3736938b348c4d3d143e418bd4"
                    },
                    "wid": {
                      "type": "string",
                      "example": "3fcbd8b7-c35b-4e83-87bc-111d5bd186b7"
                    },
                    "paymenthash": {
                      "type": "string",
                      "example": "fb4d1e4ce4de84fe3a466bcf1d8543c0df56a9ac7a6c6f28bd9434a080a14c80"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/withdraw/lnurl": {
      "post": {
        "tags": [
          "User"
        ],
        "security": [
          {
            "jwtAuth": [
              "withdraw"
            ]
          },
          {
            "cookieAuth": []
          }
        ],
        "deprecated": false,
        "description": "Create a LNURL Withdraw.",
        "operationId": "User_withdrawLnurl",
        "requestBody": {
          "description": "Amount the user wants to withdraw.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 1000,
                    "example": 10000
                  },
                  "unit": {
                    "type": "string",
                    "enum": [
                      "sat",
                      "msat"
                    ],
                    "default": "sat",
                    "example": "sat"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bech32 encoded string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lnurl": {
                      "type": "string",
                      "example": "LNURL1DP68GURN8GHJ7UM9WFMXJCM99E3K7MF0V9CXJ0M385EKVCENXC6R2C35XVUKXEFCV5MKVV34X5EKZD3EV56NYD3HXQURZEPEXEJXXEPNXSCRVWFNV9NXZCN9XQ6XYEFHVGCXXCMYXYMNSERXFQ5FNS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request query and / or body does not fit the schema requirements. It can also be raised by parameters leading to unexpected behaviour / results."
          },
          "401": {
            "description": "Does not have user permissions."
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "security": [],
        "deprecated": false,
        "description": "Delete session cookie.",
        "operationId": "User_logout",
        "responses": {
          "200": {
            "description": "Sucessfully logged out."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "session"
      },
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}